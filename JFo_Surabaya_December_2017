Java Foundations Surabaya December 2017

Day 1
=============================================================================

1Z0-811 Exam Objectives
(https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1Z0-811)

What Is Java?

    Describe the features of Java
    Describe the real-world applications of Java

Java Basics

    Describe the Java Development Kit (JDK) and the Java Runtime Environment (JRE)
    Describe the components of object-oriented programming
    Describe the components of a basic Java program
    Compile and execute a Java program

Basic Java Elements

    Identify the conventions to be followed in a Java program
    Use Java reserved words
    Use single-line and multi-line comments in Java programs
    Import other Java packages to make them accessible in your code
    Describe the java.lang package

Working with Java Data Types

    Declare and initialize variables including a  variable using final
    Cast a value from one data type to another including automatic and manual promotion
    Declare and initialize a String variable

Working with Java Operator

    Use basic arithmetic operators to manipulate data including +, -, *, /, and %
    Use the increment and decrement operators
    Use relational operators including ==, !=, >, >=, <, and <=
    Use arithmetic assignment operators
    Use conditional operators including &&, ||, and ?
    Describe the operator precedence and use of parenthesis

Working with the String Class

    Develop code that uses methods from the String class
    Format Strings using escape sequences including %d, %n, and %s

Working with the Random and Math Classes

    Use the Random class
    Use the Math class

Using Decision Statements

    Use the decision making statement  (if-then and if-then-else)
    Use the switch statement
    Compare how == differs between primitives and objects
    Compare two String objects by using the compareTo and equals methods

Using Looping Statements

    Describe looping statements
    Use a for loop including an enhanced for loop
    Use a while loop
    Use a do- while loop
    Compare and contrast the for, while, and do-while loops
    Develop code that uses break and continue statements

Debugging and Exception Handling

    Identify syntax and logic errors
    Use exception handling
    Handle common exceptions thrown
    Use try and catch blocks

Arrays and ArrayLists 

    Use a one-dimensional array
    Create and manipulate an ArrayList
    Traverse the elements of an ArrayList by using iterators and loops including the enhanced for loop
    Compare an array and an ArrayList

 Classes and Constructors

    Create a new class including a main method
    Use the private modifier
    Describe the relationship between an object and its members
    Describe the difference between a class variable, an instance variable, and a local variable
    Develop code that creates an object's default constructor and modifies the object's fields
    Use constructors with and without parameters
    Develop code that overloads constructors

Java Methods

    Describe and create a method
    Create and use accessor and mutator methods
    Create overloaded methods
    Describe a static method and demonstrate its use within a program


Java SE -- desktop solutions
		   - application
		   - applet --> browser / appletviewer

Java EE -- enterprise application
				|==> 'distributed'
Java ME -- limited device

Java App 		Native App
--------		----------
  JVM				OS
--------
  O S  

  				JVM
  			   /
  	  		JRE
  	  	   /   \
  	  	  /	    Standard Library
       JDK
       	  \
       	   \
       	   	Tools: - compiler (javac)
       	   		   - jar tools (jar)
       	   		   - javadoc generator (javadoc)
       	   		   - ...

environment variable: CLASSPATH

WORA (write once run anywhere (hope))

SDLC
1. Analysis ---> WHAT
		|---> 'use case diagram'
2. Design ---> HOW
		|---> 'activity diagram','sequence diagram',
			  'collaboration diagram', 'time diagram', ..

	Object 				Class			  		
	------------		---------------
	- attribute			- variable
	- behavior			- method / prosedur / function

3. Develop
4. Testing
5. Deploy / Install 

instantiate: proses membuat object dari sebuah class
			 (new)

class declaration:

[modifier] class ClassName {
	
}

variable declaration:

[modifier] type variableName [= initial_value];

method declaration:

[modifier] return_type methodName([parameter*]) {
	
}

konvensi penulisan:
-nama package: semuanya lower case
-nama class: selalu diawali uper case, jika lebih dari satu suku kata, awal suku kata berikutnya diwalai uper case
	Customer, SavingsAccount, CheckingAccount, ...
-nama variable/method: diawali lower case, jika lebih dari satu suku kata, awal suku kata berikutnya diwalai uper case
	customerName, firstName, lastName

type variable:
- primitive
	* logical: boolean
	* textual: char
	* integral: byte,short,int,long
	* floating: float,double
- reference/object
	Customer, Item, String, StringBuilder, ...

penamaan variable:
 a - z 		a - z
 A - Z  +  	A - Z
   _ 		  _
   $		  $
   			0 - 9

boolean

byte -- short -- int -- long -- float -- double
			   /
		  char

int a = 10;
double b = a;  --- PROMOTION ---> double b = (double)a;
					|==> otomatis/implicit

double c = 5.7;
int d = c; XXX --- CASTING ---> int d = (int) c;
					 |==> explicit

byte e = 10;
byte f = 11;
byte g = e + f; XXX ---> byte g = (byte)(e + f);

float h = 7.5; XXX ---> float h = 7.5F;
						float h = 7.5f;


primitive 			Wrapper
------------------------------------
boolean 			Boolean
byte 				Byte
short 				Short
int 				Integer
long 				Long
float 				Float
double	 			Double
char 				Character

boxing --> primitive ke reference
int a = 100;
Integer wa = new Integer(a);

unboxing --> reference ke primitive
String b = "200";
- cara 1:
	Integer wb = new Integer(b);
	int pb = wb.intValue();
- cara 2:
	int pb = Integer.parseInt(b);

method return type:
- void ---> procedure
- primitve ---> function
- reference ---> function

class : - driver class --> main
		- object class --> tidak ada method main

berdasarkan lokasinya, variable dibedakan menjadi:
- instance variable / attribute
	didefine di dalam classs, di luar method
	bisa memiliki access modifier
	otomatis akan diinisialisasi ke default value dari type-nya

- local variable / temporary var / stack variable
	didefine di dalam method (sebagai parameter atau di dalam body dari method)
	tidak bisa memiliki access modifier
	HARUS diinisialisasi secara explicit sebelum digunakan


Day 2
==========================================================

String -- immutable object
		  setiap kali dimodifikasi dia akan membuat tempat baru di memory area

		  		Mutable		Thread-safe
String 			   X 			X
StringBuilder  	   V 		    X
StringBuffer	   V	   	    V

Membandingkan dua object String:
- equals / equalsIgnoreCase : boolean
	dua string dikatakan sama jika mengembalikan nilai true
- compareTo / compareToIgnoreCase : int
	dua string dikatakan sama jika mengembalikan nilai 0
- == (tidak direkomendasikan --> yang dibandingkan adalah lokasi object di heap area, bukan isi/value dari object)


member dari sebuah class dapat dibedakan menjadi dua:
- instance member -- non static
	member ini dapat diakses menggunakan instance atau object dari class tersebut
	dapat digunakan sebagai PEMBEDA antara instance yang satu dengan instance yang lain
- class member -- static
	member ini dapat diakses cukup menggunakan nama class nya (tidak perlu membuat object)
	tidak dapat digunakan sebagai pembeda antara instance yang satu dengan yang lain (karena nilainya di share, digunakan bersama)


operand 1 && operand 2

operand 1 & operand 2

switch --- byte,short,char,int
		   JDK1.5 -- enum
		   JDK1.7 -- String

looping
- for --- Nx
	for(init_expr; boolean_expr; alter_expr) {

	}
- while --- 0 - ~
	while(boolean_expr) {

	}
- do..while --- 1 - ~
	do {

	} while(boolean_expr);


constructor
-----------
digunakan / dipanggil pada saat dibuat object dari sebuah class (dengan keyword 'new')

syntax constructor mirip dengan method, HANYA SAJA:
1. constructor tidak memiliki return_type
2. nama constructor SAMA PERSIS dengan nama class

Setiap class PASTI memiliki constructor, jika tidak dituliskan secara explicit, maka akan dibuatkan DEFAULT CONSTRUCTOR. Default Constructor:
	- parameter nya kosong
	- body nya juga kosong

constructor juga dapat difungsikan untuk menginisialisasi attribute dari object yang dibuat.

jika kita menuliskan constructor secara explicit, maka default constructor akan hilang
untuk tetap dapat menggunakan default constructor, kita bisa melakukan OVERLOADING CONSTRUCTOR
Syarat OVERLOADING:
--> parameter HARUS BERBEDA
		- beda jumlah
		- beda tipe
		- beda urutan

sama halnya dengan constructor, method dapat di overloading
Syarat method OVERLOADING:
--> nama method: SAMA
--> parameter HARUS BERBEDA
		- beda jumlah
		- beda tipe
		- beda urutan
- access modifier: boleh sama
- return type: boleh sama


Encapsulation
-------------------
membungkus --- apa yang dibungkus? - variable
								   - method
		  variable dan method HARUS didefinisikan di dalam class								   

selain membungkus, encapsulation dapat digunakan untuk menyembunyikan data (information hiding), maksudnya supaya data digunakan dengan aturan yang sudah ditentukan (data tidak diisi dengan sembarang nilai).

Encapsulation dilakukan dengan:
1. menambahkan access modifier 'private' pada variable
2. menyediakan method accessor / getter --> mengambil nilai 
3. menyediakan method mutator / setter --> memberi nilai

access 		 same   	same  		inheri- 	univer-
modifier 	 class  	package 	tance  		sal
=========================================================
private        V 	       X  	       X 		  X
[default]  	   V  	       V  		   X 	      X
protected  	   V  		   V  		   V  		  X
public     	   V  	       V 		   V 		  V


final 
- variable --> nilainya konstan, tidak bisa diubah nilainya, jika diubah: error pada saat di compile
- method --> tidak dapat di OVERRIDE
- class --> tidak dapat di extends (tidak bisa memiliki turunan)



















